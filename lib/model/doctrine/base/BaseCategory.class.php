<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Category', 'doctrine');

/**
 * BaseCategory
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $category_id
 * @property string $name
 * @property integer $parent_id
 * @property Doctrine_Collection $ProductDetails
 * 
 * @method integer             getCategoryId()     Returns the current record's "category_id" value
 * @method string              getName()           Returns the current record's "name" value
 * @method integer             getParentId()       Returns the current record's "parent_id" value
 * @method Doctrine_Collection getProductDetails() Returns the current record's "ProductDetails" collection
 * @method Category            setCategoryId()     Sets the current record's "category_id" value
 * @method Category            setName()           Sets the current record's "name" value
 * @method Category            setParentId()       Sets the current record's "parent_id" value
 * @method Category            setProductDetails() Sets the current record's "ProductDetails" collection
 * 
 * @package    symfonypractice
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCategory extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('category');
        $this->hasColumn('category_id', 'integer', 8, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('name', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('parent_id', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('ProductDetails', array(
             'local' => 'category_id',
             'foreign' => 'category_id'));
    }
}